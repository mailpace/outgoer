import { Job } from 'bullmq';
import config from '../../src/config/index.js';

import { logger } from '../../src/lib/logger.js';
import startSenderWorker from '../../src/workers/sender.js';

jest.mock('../../src/lib/logger.js', () => ({
  logger: {
    info: jest.fn(),
    error: jest.fn(),
  },
}));

jest.mock('../../src/lib/transports/index.js', () => ({
  createTransport: jest.fn(),
}));

const mockCreateTransport = jest.requireMock('../../src/lib/transports/index.js').createTransport;

describe('startSenderWorker', () => {
  let mockJob: Job<any>;
  let mockUpdate: jest.Mock;

  beforeEach(() => {
    mockCreateTransport.mockReset();
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  it('should handle the case when no services are configured', async () => {
    config.services = [];

    startSenderWorker();

    expect(logger.error).toHaveBeenCalledWith(
      expect.stringContaining('No sending services configured')
    );
    expect(logger.error).toHaveBeenCalledWith(
      expect.stringContaining('Unrecoverable: No sending services configured')
    );
    expect(mockUpdate).not.toHaveBeenCalled();
  });

  it('should handle successful email sending', async () => {
    // const chosenService = { providerName: 'Provider1' };
    const mockTransporter = {
      sendMail: jest.fn(),
    };
    mockCreateTransport.mockReturnValue(mockTransporter);

    startSenderWorker();

    expect(logger.info).toHaveBeenCalledWith(
      expect.stringContaining('Email job'),
      expect.stringContaining('sent successfully')
    );
    expect(mockUpdate).toHaveBeenCalled();
    expect(mockTransporter.sendMail).toHaveBeenCalledWith({ raw: mockJob.data.raw });
  });
});
